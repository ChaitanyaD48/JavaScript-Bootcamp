/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000
app.use(bodyParser.json());                   // For Reading Post Request response body

var todos = [];
var obj1 = {
  "title": "Buy groceries",
  "completed": false, 
  "description": "I should buy groceries"
}
todos.push(obj1);

var obj2 = {
  "title": "Buy Milk",
  "completed": true, 
  "description": "I should buy Milk"
}
todos.push(obj2);

app.get('/', (req, res) => {
  res.send("Hi, Welcome to Todo App")
})

app.get('/todos', (req, res) => {
  res.send(todos)
})

app.get('/todos/:id', (req, res) => {
  console.log(req.params.id);
  var taskNo = req.params.id;
  if(taskNo >= todos.length){
    res.status(404).send("The Id does not Exist.");
  }else{
    res.send(todos[req.params.id]);
  }
})

app.get('/todos', (req, res) => {
  res.send('Welcome to todos Route!')
})

app.post('/todos', (req, res) => {
  var size = todos.length;
  var newTodo = {
    "id": size,
    "title": req.body.title,
    "description": req.body.description
  }
  console.log(req.body);
  todos.push(newTodo);
  res.status(201).send({ id: newTodo.id });
})

app.put('/todos/:id', (req, res) => {
  if(req.params.id >= todos.length){
    res.status(404).send('Todo item not found');
  }else{
    var req_todo = todos[req.params.id];
    req_todo.title = req.body.title;
    req_todo.description = req.body.description;
    req_todo.completed = req.body.completed;

    console.log('Todo Item Updated Successfully!');
    res.send(req_todo);
  }
})

app.delete('/todos/:id', (req, res) => {
  if(req.params.id >= todos.length){
    res.status(404).send('Todo item not found');
  }else{
    todos.splice(todos.indexOf(todos), 1);
    console.log('Todo Item Deleted Successfully!');
    res.send(todos);
  }
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

app.use(bodyParser.json());

module.exports = app;
